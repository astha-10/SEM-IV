1) Print all records of file Bank.lst
root@MUM084:~/Desktop# awk '{print}' bank.lst

2)Print first 3 fields (acc no., name and balance) from bank.lst (field 1 is referred by $1 and so on.)
root@MUM084:~/Desktop# awk '{print $1 $2 $3}' bank.lst

3)Sepearate fields by tabs.
root@MUM084:~/Desktop# awk '{print $1 "\t" $2 "\t" $3}' bank.lst

4) Print only those records having 'current' account.
root@MUM084:~/Desktop# awk '/current/ {print}' bank.lst
root@MUM084:~/Desktop# awk '/current/' bank.lst
root@MUM084:~/Desktop# awk /current/ bank.lst

5)Format specifiers for the field can be specified as below:
bank.lst^Croot@MUM084:~/Desktop# awk '{printf "%3d \t %-15s \t %7d \n", $1, $2, $3}' bank.lst

6)Printing records having 'current' account. $0 means entire line.
root@MUM084:~/Desktop# awk '/current/ {print $0}' bank.ls

7)Printing individual fields of file. 
root@MUM084:~/Desktop# awk '/current/ {print $1}' bank.lst
root@MUM084:~/Desktop# awk '/current/ {print $2}' bank.lst

8)Print records having balance less than 5000. (here $3 represents the 3rd field balance)
root@MUM084:~/Desktop# awk '$3<5000' bank.lst

9) 'OR'ing two conditions.
Print records having balance less than 5000 or more than 10000
root@MUM084:~/Desktop# awk '$3<5000 || $3>10000' bank.lst

10)Print records having balance less than 8000 and more than 3000
root@MUM084:~/Desktop# awk '$3>3000&&$3<8000 {print $1, $2, $3}' bank.lst

11)Print all records whose account type is current.
root@MUM084:~/Desktop# awk '$5 == "current"' bank.lst

12)Print all records whose account type is Current.
root@MUM084:~/Desktop# awk '$5 == "Current"' bank.lst

13)Print all records whose account type is not Current.
root@MUM084:~/Desktop# awk '$5 != "Current"' bank.lst

14)Print records whose acc. type is 'current''
root@MUM084:~/Desktop# awk '$5 ~/current/' bank.lst

15)Print records whose acc. type is 'saving'
root@MUM084:~/Desktop# awk '$5 ~/saving/' bank.lst

16)Print records whose acc. type is not 'saving'
root@MUM084:~/Desktop# awk '$5 !~/saving/' bank.lst

17)Print records not ending with character 'g'
root@MUM084:~/Desktop# awk '$5 !~/g$/' bank.lst

18)Print records ending with character 'g'
root@MUM084:~/Desktop# awk '$5 ~/g$/' bank.lst

19)Print names of customers having saving account.
root@MUM084:~/Desktop# awk '$5 ~/saving/{print $2}' bank.lst

20)Display records whose account type is current or Current
root@MUM084:~/Desktop# awk '$5~/[Cc]urrent/' bank.lst

21)Display those records whose account type field end ith letter t or T
root@MUM084:~/Desktop# awk '$5~/[Tt]$/' bank.lst

22)Display account number, name and balance of those records whose account type field end ith letter t or T
root@MUM084:~/Desktop# awk '$5~/[Tt]$/{print $1, $2, $3}' bank.lst

23)Display records from record number 3 to record number 7.
root@MUM084:~/Desktop# awk 'NR>=3 && NR<=7 {print $1, $2, $3}' bank.lst

24)Display records from record no. 2 to record no.8.
root@MUM084:~/Desktop# awk 'NR==2, NR==8 {print $1, $2, $3}' bank.lst

25)Display acc. No, name and balance of records having record no. 2 or record no.8 along with record no.
root@MUM084:~/Desktop# awk 'NR==2 || NR==8 {print NR, $1, $2, $3}' bank.lst

26)display name with record no. Having record no less than 2 and more than 8. 
root@MUM084:~/Desktop# awk 'NR<2 || NR>8 {print NR, $2}' bank.lst

27)Create text.lst file as shown below:
root@MUM084:~/Desktop# cat > text.lst

28)Print number of fields in each line /record of the file text.lst
root@MUM084:~/Desktop# awk '{print NF}' text.lst

29)Print last field of each line in text.lst
root@MUM084:~/Desktop# awk '{print $NF}' text.lst

30)Print last field of each line in bank.lst
root@MUM084:~/Desktop# awk '{print $NF}' bank.lst

31)Print all records having A at the beginning of second field
root@MUM084:~/Desktop# awk '$2 ~ "^A"' bank.lst

32)Print all records having A at the beginning of second field and g at the end of fifth field
root@MUM084:~/Desktop# awk '$2 ~ "^A" && $5 ~ "g$"' bank.lst

33)Print records whose date of opening starts with 14 or the year ends with 12.
root@MUM084:~/Desktop# awk '$4 ~ "^14" || $4~"12$"' bank.lst

34)Print records whose date of opening is 20 and the year is 09.
root@MUM084:~/Desktop# awk '$4 ~ /^20.*09/' bank.lst

35)Print records whose date of opening is 20 and the year is 09 and whose name starts with N
root@MUM084:~/Desktop# awk '$4 ~ /^20.*09/ && $2 ~/^N/' bank.lst

36)Print all lines whose length is more than 32
root@MUM084:~/Desktop# awk 'length($0) > 32' bank.lst

37)Performing arithmatic operation:
Print customer name, balance, date and 5% interest on balance
root@MUM084:~/Desktop# awk '$5 == "saving" { printf "%20s %d %20s %f \n",$2,
$3, $4, $3*0.05}' bank.lst

38)Create file countrec.awk which contains actions to count no. Of records, to calculate total balance
and average balance. Apply commands in this file to bank.lst
root@MUM084:~/Desktop# cat > countrec.awk
BEGIN{printf "Records are: \n"
}
{
print $0
c++
sum+=$3
}
END{printf "\n Number of records are: %d", c
printf "\n Total balance is %d", sum
printf "\n Average balance is " %f", sum/c
}
root@MUM084:~/Desktop# awk -f countrec.awk bank.lst

39)Create file addnonzero.awk which contains actions to add only nonzero balance,
display total balance and average balance. Apply commands in this file to bank.lst
root@MUM084:~/Desktop# cat > addnonzero.awk
$3==0{next}
{total+=$3
count++
}
END{avg=total/count
printf"\n Total is : %d", total
printf"\n average is: %d", avg
printf"\n no. of customers is %d", count}
root@MUM084:~/Desktop# awk -f addnonzero.awk bank.lst

40)Update nonzero.awk file such that it adds balance of those customers whose account type is not
'saving', displays their average and no of such records
Hence the nonzero.awk now becomes:
$5 ~/^s/{next}
{total+=$3
count++
}
END{avg=total/count
printf"\n Total is : %d", total
printf"\n average is: %d", avg
printf"\n no. of customers is %d", count}
root@MUM084:~/Desktop# awk -f addnonzero.awk bank.lst

41)command to calculate 5% interest if balance more than 10000 else interest is 6%
root@MUM084:~/Desktop# cat >interest

42)Write command to calculate 5% interest if account type is 'current' else interest is 6%
interest file is updated as below:
{if ($5~/current/) print "interest = " $3*0.05;
else print "interest = " $3*0.06}
root@MUM084:~/Desktop# awk -f interest bank.lst

43)Write command to calculate 5% interest if account type is 'current' or 'Current' else interest is 6%
interest file is updated as below:
{if ($5~/[Cc]urrent/) print "interest = " $3*0.05;
else print "interest = " $3*0.06}
root@MUM084:~/Desktop# awk -f interest bank.lst

44)
