DATA_SEG SEGMENT
	 NUM1 DW 1234H
	 NUM2 DW 5678H
	 SUM DW 00H
DATA_SEG ENDS

CODE_SEG SEGMENT
	 ASSUME CS:CODE_SEG, DS:DATA_SEG

START: MOV AX, DATA_SEG
	 MOV DS, AX 	;initialise data segment

	 MOV AX,NUM1 	;get first number
	 MOV BX,NUM2	;get second number
	 ADD AL,BL 	;add lower bytes
	 DAA 		;adjust sum to BCD
 	 MOV CL,AL 	;store the lower byte sum
	 MOV AL,AH 	;move higher byte of NUM1 to AL
 	 ADC AL,BH  	;add higher bytes with carry
 	 DAA 		;adjust sum to BCD
 	 MOV CH,AL 	;store higher byte of sum
 	 MOV SUM,CX  	;store the sum

 	 MOV AH, 4CH    ;exit to DOS
 	 INT 21H
CODE_SEG ENDS
END START









This assembly code calculates the sum of two 16-bit numbers (`NUM1` and `NUM2`) and stores the result in `SUM` using BCD (Binary Coded Decimal) arithmetic. Here's an explanation of each line:

1. `DATA_SEG SEGMENT`: Declares the start of a segment named `DATA_SEG` where data variables will be stored.

2. `NUM1 DW 1234H`: Declares a word-sized variable named `NUM1` and initializes it with the value `1234H` (4660 in decimal).

3. `NUM2 DW 5678H`: Declares another word-sized variable named `NUM2` and initializes it with the value `5678H` (22136 in decimal).

4. `SUM DW 00H`: Declares a word-sized variable named `SUM` and initializes it with the value `00H` (0 in decimal).

5. `DATA_SEG ENDS`: Declares the end of the `DATA_SEG` segment.

6. `CODE_SEG SEGMENT`: Declares the start of a segment named `CODE_SEG` where the actual code will be stored.

7. `ASSUME CS:CODE_SEG, DS:DATA_SEG`: Tells the assembler to assume that the code segment (`CS`) is `CODE_SEG` and the data segment (`DS`) is `DATA_SEG`.

8. `START: MOV AX, DATA_SEG`: Moves the starting address of the `DATA_SEG` segment to the `AX` register.

9. `MOV DS, AX`: Moves the contents of the `AX` register (which now holds the starting address of `DATA_SEG`) to the `DS` register, effectively initializing the `DS` register to point to the `DATA_SEG` segment.

10. `MOV AX, NUM1`: Moves the value of `NUM1` (`1234H`) into the `AX` register.

11. `MOV BX, NUM2`: Moves the value of `NUM2` (`5678H`) into the `BX` register.

12. `ADD AL, BL`: Adds the lower bytes of `AX` and `BX` (the values of `NUM1` and `NUM2` respectively) and stores the result in `AL`.

13. `DAA`: Decimal Adjust after Addition. Adjusts the sum in `AL` to a valid BCD value.

14. `MOV CL, AL`: Moves the lower byte of the sum (from `AL`) into the `CL` register.

15. `MOV AL, AH`: Moves the higher byte of `AX` (from `NUM1`) into `AL`.

16. `ADC AL, BH`: Adds the higher bytes of `AX` and `BX` (from `NUM1` and `NUM2` respectively) along with the carry flag (`CF`) and stores the result in `AL`.

17. `DAA`: Decimal Adjust after Addition. Adjusts the sum in `AL` to a valid BCD value.

18. `MOV CH, AL`: Moves the higher byte of the sum (from `AL`) into the `CH` register.

19. `MOV SUM, CX`: Moves the combined lower and higher bytes of the sum (from `CL` and `CH`) into the `SUM` variable.

20. `MOV AH, 4CH`: Sets up the DOS exit function.

21. `INT 21H`: Generates an interrupt to call the DOS function, effectively ending the program.

22. `CODE_SEG ENDS`: Declares the end of the `CODE_SEG` segment.

23. `END START`: Marks the end of the program, specifying that the program execution should start at the `START` label.