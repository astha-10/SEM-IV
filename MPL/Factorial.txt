DATA_SEG SEGMENT
    	NUM  DW 5 ; Number for factorial calculation
    	FACT DW 0 ; Variable to store the factorial result
DATA_SEG ENDS

CODE_SEG SEGMENT
ASSUME CS: CODE_SEG, DS: DATA_SEG 

START:
	; INITIALIZATION OF DATA SEGMENT
	MOV AX, DATA_SEG
	MOV DS, AX
	
	; FACTORIAL CALCULATION
	MOV AX, 1 	; Initialize AX with 1
	MOV CX, NUM    	; Move the value of NUM into CX

AGAIN:
	MUL CX 		; Multiply AX by CX (NUM)
	LOOPNZ AGAIN    ; Decrement CX and loop if CX is not zero
	MOV [FACT], AX  ; Store the factorial result from AX to FACT

; EXIT TO DOS
MOV AH, 4CH     	; Set AH to 4CH for exit
INT 21H 		; Call interrupt for DOS exit

CODE_SEG ENDS
END START






Here's an explanation of each line in the assembly code provided:

1. `DATA_SEG SEGMENT`: Declares the start of a segment named `DATA_SEG` where data variables will be stored.

2. `NUM DW 5`: Declares a word-sized variable named `NUM` and initializes it with the value `5`.

3. `FACT DW 0`: Declares another word-sized variable named `FACT` and initializes it with the value `0`.

4. `DATA_SEG ENDS`: Declares the end of the `DATA_SEG` segment.

5. `CODE_SEG SEGMENT`: Declares the start of a segment named `CODE_SEG` where the actual code will be stored.

6. `ASSUME CS:CODE_SEG, DS:DATA_SEG`: Tells the assembler to assume that the code segment (`CS`) is `CODE_SEG` and the data segment (`DS`) is `DATA_SEG`.

7. `START:`: Defines a label `START` indicating the start of the program.

8. `MOV AX, DATA_SEG`: Moves the starting address of the `DATA_SEG` segment to the `AX` register.

9. `MOV DS, AX`: Moves the contents of the `AX` register (which now holds the starting address of `DATA_SEG`) to the `DS` register, effectively initializing the `DS` register to point to the `DATA_SEG` segment.

10. `MOV AX, 1`: Initializes the `AX` register with the value `1`, which will be used to calculate the factorial.

11. `MOV CX, NUM`: Moves the value of `NUM` (which is `5`) into the `CX` register, indicating the number for which the factorial will be calculated.

12. `AGAIN:`: Defines a label `AGAIN` to mark the start of the loop for factorial calculation.

13. `MUL CX`: Multiplies `AX` by `CX` (which is `NUM`), storing the result in `AX`. This effectively calculates the factorial iteratively.

14. `LOOPNZ AGAIN`: Decrements `CX` and jumps to the `AGAIN` label if `CX` is not zero. This repeats the multiplication until `CX` becomes zero.

15. `MOV [FACT], AX`: Stores the final factorial result from `AX` into the `FACT` variable.

16. `MOV AH, 4CH`: Sets up the DOS exit function.

17. `INT 21H`: Generates an interrupt to call the DOS function, effectively ending the program.

18. `CODE_SEG ENDS`: Declares the end of the `CODE_SEG` segment.

19. `END START`: Marks the end of the program, specifying that the program execution should start at the `START` label.