# Exception Handling

# 1) try & except blocks
try:
 	a = int(input("Enter a:"))
 	b = int(input("Enter b:"))
 	c = a / b
except:
 	print("Can't divide with zero")


# 2) Using Exception with except statement. If we print(Exception) it will 
return exception class
try:
 	a = int(input("Enter a:"))
 	b = int(input("Enter b:"))
 	c = a/b
 	print("a/b = %d"%c)
except Exception:
	 print("can't divide by zero")
	 print(Exception)
else:
 	print("Hi I am else block")


# 3) Using exception object with the except statement
try:
 	a = int(input("Enter a:"))
 	b = int(input("Enter b:"))
 	c = a/b
	print("a/b = %d"%c)
except Exception as e:
	 print("can't divide by zero")
 	 print(e)
else:
 	print("Hi I am else block")


# 4) Throws an exception if the file doesn't exist.
try:
 	fileptr = open("file.txt", "r")
except IOError:
 	print("File not found")
else:
 	print("The file opened successfully")


# 5) Multiple Exceptions
try:
 	a = 10 / 0
except(ArithmeticError, IOError):
	print("Arithmetic Exception")
else:
	print("Successfully Done")


# 6) try & finally blocks
try:
	 fileptr = open("files.txt", "r")
 	 try:
 		fileptr.write("Hi I am good")
 	 finally:
		fileptr.close()
		print("file closed")
except:
 	print("Error")


# 7) Raising Exceptions
try:
 	age = int(input("Enter the age:"))
 	if (age < 18):
 		raise ValueError
 	else:
 		print("the age is valid")
except ValueError:
 	print("The age is not valid")


# 8) Raising exceptions with message
A)
try:
 	num = int(input("Enter a positive integer: "))
 	if num <= 0:
 		raise ValueError("That is a negative number!")
	except ValueError as e:
 		print(e)


# B)
try:
 	a = int(input("Enter a:"))
 	b = int(input("Enter b:"))
 	if b == 0:
 		raise ArithmeticError
 	else:
 		print("a/b = ", a/b)
	except ArithmeticError:
 		print("The value of b can't be 0")


# 9) Custom Exception
class ErrorInCode(Exception):
 	def __init__(self, data):
 		self.data = data
 	def __str__(self):
		return repr(self.data)
try:
 	raise ErrorInCode(2000)
except ErrorInCode as ae:
 	print("Received error:", ae.data)
