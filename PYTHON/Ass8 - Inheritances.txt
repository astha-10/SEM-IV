#SINGLE INHERITANCE
class Parent:
    def __init__(self):
        print("Parent constructor")
    def parent_method(self):
        print("Parent method")

class Child(Parent):
    def __init__(self):
        super().__init__()
        print("Child constructor")

    def child_method(self):
        print("Child method")
# Create an object of Child class
child = Child()
child.parent_method()
child.child_method()


#SINGLE INHERITENCE WITH TWO CHILDS
class Details:
 def __init__(self):
	 self.__id = 0
 	self.__name = ""
 	self.__gender = ""
 def setDetails(self):
 	self.__id = int(input("Enter Id: "))
 	self.__name = input("Enter Name: ")
 	self.__gender = input("Enter gender: ")
 def showDetails(self):
	print("Id: ", self.__id)
 	print("Name: ", self.__name)
 	print("Gender: ", self.__gender)

class Employee(Details):
 def __init__(self):
 	self.__company = ""
 	self.__desig = ""
 def setEmployee(self):
 	self.setDetails()
 	self.__company = input("Enter Compmany Name: ")
 	self.__desig = input("Enter Designation: ")
 def showEmployee(self):
 	self.showDetails()
 	print("Company: ", self.__company)
 	print("Designation: ", self.__desig)

class Doctor(Details):
 def __init__(self):
 	self.__hospital = ""
 	self.__dept = ""
 def setDoctor(self):
 	self.setDetails()
 	self.__hospital = input("Enter Hospital Name: ")
 	self.__dept = input("Enter Department: ")
 def showDoctor(self):
 	self.showDetails()
 	print("Hospital: ", self.__hospital)
 	print("Department", self.__dept)

def main():
 	print("Employee Object: ")
 	e = Employee()
	e.setEmployee()
 	e.showEmployee()
 	print("\nDoctor Object: ")
 	d = Doctor()
 	d.setDoctor()
 	d.showDoctor()
if __name__ == "__main__":
 	main()


#MULIPLE INHERITANCE
class Parent1:
    def method1(self):
        print("Parent1 method")
class Parent2:
    def method2(self):
        print("Parent2 method")
class Child(Parent1, Parent2):
    def child_method(self):
        print("Child method")
# Create an object of Child class
child = Child()
child.method1()
child.method2()
child.child_method()



#HIERARCHIAL INHERITANCE
class Parent:
    def method(self):
        print("Parent method")
class Child1(Parent):
    def child1_method(self):
        print("Child1 method")
class Child2(Parent):
    def child2_method(self):
        print("Child2 method")
# Create objects of Child1 and Child2 classes
child1 = Child1()
child2 = Child2()
child1.method()
child1.child1_method()
child2.method()
child2.child2_method()


#MULTILEVEL INHERITANCE
class GrandParent:
    def grandparent_method(self):
        print("GrandParent method")
class Parent(GrandParent):
    def parent_method(self):
        print("Parent method")
class Child(Parent):
    def child_method(self):
        print("Child method")
# Create an object of Child class
child = Child()
child.grandparent_method()
child.parent_method()
child.child_method()
