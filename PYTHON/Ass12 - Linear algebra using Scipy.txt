#importing the scipy and numpy packagesfrom scipy 
import linalg
import numpy as np #Declaring the
numpy arrays
a = np.array([[3, 2, 0], [1, -1, 0], [0, 5, 1]])
b = np.array([2, 4, -1])
#Passing the values to the solve functionx =
linalg.solve(a, b)
#printing the result arrayprint (x)
OUTPUT:
[ 2. -2. 9.]


#Determinant
#importing the scipy and numpy packagesfrom scipy 
import linalg
import numpy as np #Declaring the
numpy arrayA = np.array([[1,2],[3,4]])
#Passing the values to the det function
x = linalg.det(A) #printing the
resultprint (x)
OUTPUT:
-2.0


#eigen value and eigen vectors #importing the scipy
and numpy packagesfrom scipy import linalg
import numpy as np #Declaring the
numpy arrayA = np.array([[1,2],[3,4]])
#Passing the values to the eig functionl, v =
linalg.eig(A)
#printing the result for eigen valuesprint (l)
#printing the result for eigen vectorsprint (v)
OUTPUT:
[-0.37228132+0.j 5.37228132+0.j][[-
0.82456484 -0.41597356]
[ 0.56576746 -0.90937671]]


CHATGPT:
import numpy as np
from scipy import linalg

# Define a 2x2 matrix
A = np.array([[1, 2], [3, 4]])

# Compute the determinant of A
det_A = linalg.det(A)
print("Determinant of A:", det_A)

# Compute the inverse of A
inv_A = linalg.inv(A)
print("Inverse of A:\n", inv_A)

# Define a 2x1 vector
b = np.array([[5], [6]])

# Solve the linear system Ax = b
x = linalg.solve(A, b)
print("Solution to Ax = b:\n", x)

# Compute the eigenvalues and eigenvectors of A
eigvals, eigvecs = linalg.eig(A)
print("Eigenvalues of A:", eigvals)
print("Eigenvectors of A:\n", eigvecs)
